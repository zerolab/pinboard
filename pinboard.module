<?php
/**
 * @file
 *    pinboard.module - a simple bookmarking utility and UI
 */

/**
 *  Implementation of hook_perm()
 */
function pinboard_perm() {
  return array(
    'access bookmarks', // public bookmarks
    'view own private bookmarks',
    'create bookmarks',
    'delete own bookmarks',
    'delete any bookmarks'
  );
}


/**
 *  Implementation of hook_menu()
 */
function pinboard_menu() {
  $items = array();

  $items['bookmark/add'] = array(
    'title' => 'Add bookmark',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_form'),
    'access callback' => 'user_access',
    'access arguments' => array('create bookmarks')
  );

  $items['bookmark/%/delete'] = array(
    'title' => 'Delete bookmark',
    'page callback' => 'pinboard_delete',
    'page arguments' => array(1),
    'access arguments' => array('delete own bookmarks'),
    'type' => MENU_CALLBACK
  );

  // callbacks
  $items['bookmark/%/%'] = array(
    'title' => 'Bookmark action',
    'page callback' => 'pinboard_actions_page',
    'page arguments' => array(1, 2),
    'access callback' => 'pinboard_access',
    'access arguments' => array('create bookmarks', 'delete own bookmarks'),
    'type' => MENU_CALLBACK
  );

  // User-specific data
  $items['user/%user/bookmarks'] = array(
    'title' => t('Bookmarks'),
    'page callback' => 'pinboard_user_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access bookmarks'),
    'file' => 'pinboard.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  return $items;
}

/**
 * Implememtation of hook_access
 * Check for multiple permissions
 */
function pinboard_access() {
  foreach(func_get_args() as $perm) {
    if (!user_access($perm)) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Implementation of hook_form()
 * This is the bookmark creation form
 */
function pinboard_form() {
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => 'URL',
    '#required' => TRUE
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => 'Short description',
    '#description' => 'Enter a short description or summary for the bookmarked URL. Up to 250 characters.'
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Bookmark')
  );

  return $form;
}

/**
 *  Implementation of hook_validate()
 *
 *  @todo use idn_to_ascii() for PHP 5.3
 */
function pinboard_form_validate($form, &$form_state) {
  $url = $form_state['values']['url'];

  if (function_exists('idn_to_ascii')) {
    $url = idn_to_ascii($url);
  }
  if (!valid_url($url, TRUE) ) {
    form_set_error('url', 'Please enter a valid URL');
  }
}

/**
 *  Handles the bookmark creation
 *
 * @todo get title/description via drupal_http_request to $url if empty
 */
function pinboard_form_submit($form, &$form_state) {
  global $user;

  $bookmark = new StdClass;
  $bookmark->url    = check_url($form_state['values']['url']);
  $bookmark->title  = check_plain($form_state['values']['title']);
  $bookmark->description = check_plain($form_state['values']['description']);

  if (pinboard_save($bookmark)) {
    $message = 'Bookmark successfully added';
  }
  else {
    $message = 'Could not save bookmark.';
  }

  drupal_set_message($message);
}

/**
 * Callback function for bookmark actions (add/delete)
 * @param $action
 *    The action to perform
 * @param $content_id
 *    The id of content to perform an action on. Can be a node id for add.
 *    Always a bookmark id for delete.
 */
function pinboard_actions_page($action, $content_id = NULL) {
  if (!in_array($action, array('add', 'delete')) || !is_numeric($content_id)) {
    $error = t('Unexpected error. Unsupported action performed!');
    drupal_set_message($error, 'error');
    drupal_access_denied();
    return;
  }

  // Oh, Devel, we love you but not here
  $GLOBALS['devel_shutdown'] = FALSE;

  $js = $_REQUEST['js'];

  if ($action == 'add') {
    $node = node_load($content_id);

    $bookmark = new StdClass;
    $bookmark->url = url('node/'. $node->nid, array('absolute' => TRUE));
    $bookmark->title = $node->title;
    $bookmark->description = check_plain($node->teaser);

    if ($bid = pinboard_save($bookmark)) {
      $message = t('Bookmark successfully added');
      $link = 'bookmark/delete/'. $bid;
      $text = 'Remove bookmark';
      $status = 'bookmarked';
    }
    else {
      $error = t('Could not add bookmark.');
    }

  }
  else if ($action == 'delete') {
    pinboard_delete($content_id);
    $message = t('Bookmark successfully deleted');
    $text = 'Bookmark';
    $status = 'unbookmarked';

    if (is_numeric($_REQUEST['nid']) ) {
      $link = url('bookmark/add/'. $_REQUEST['nid'], array('absolute' => TRUE));
    }
  }

  if ($js) {
    drupal_set_header('Content-Type: text/javascript; charset=utf-8');
    print drupal_to_js(array(
      'status' => $status,
      'link' => $link,
      'text' => $text,
    ));
  }
  else {
    drupal_set_message($message);
    drupal_goto();
  }
}

/**
 * Save/update a bookmark
 * @param $bookmark
 *    An object with the bookmark url, title and description
 * @return
 *    FALSE if there was an error. Bookmark id otherwise
 */
function pinboard_save($bookmark) {
  if (!is_object($bookmark) || !$bookmark->url) {
    return FALSE;
  }

  global $user;

  if ($bid = db_result(db_query("SELECT bid FROM {pinboard} WHERE url='%s' AND uid = %d", $bookmark->url, $user->uid)) ) {
    // Update the title/description since it already exists
    db_query("UPDATE {pinboard} SET title='%s', description = '%s' WHERE bid = %d", $bookmark->title, $bookmark->description, $bid);
  }
  else {
    // add new bookmark
    db_query("INSERT INTO {pinboard} (uid, url, title, description, created) "
    ."VALUES (%d, '%s', '%s', '%s', %d)", $user->uid, $bookmark->url, $bookmark->title, $bookmark->description, time());
    $bid = db_last_insert_id('pinboard', 'bid');
  }

  return $bid;
}

/**
 *  Removes a bookmark.
 * @param $bid
 *    The bookmark id
 */
function pinboard_delete($bid) {
  global $user;

  $query = "DELETE FROM {pinboard} WHERE bid = %d";
  if (!user_access('delete any bookmarks', $user)) {
    $query .= " AND uid = ". $user->uid;
  }

  return db_query($query, $bid);
}

/**
 * Utility function for outputting a bookmark link for nodes
 * @param $nid
 *    Node id to generate bookmark link for
 * @return
 *    An html link
 *
 * @todo check if node/link already bookmarked by user
 */
function pinboard_create_link($nid) {
  $node = node_load($nid);

  if ($node) {
    return l('Bookmark', 'bookmark/add/'. $node->nid, array('absolute' => TRUE, 'attributes' => array('class' => 'pinboard-link', 'data-id' => $node->nid)));
  }

  return;
}

function pinboard_init() {
  drupal_add_js(drupal_get_path('module', 'pinboard'). '/pinboard.js');
  drupal_add_css(drupal_get_path('module', 'pinboard'). '/pinboard.css');
}