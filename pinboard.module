<?php
/**
 * @file
 *    pinboard.module - a simple bookmarking utility and UI
 */

/**
 *  Load the common includes
 */
function pinboard_load_common_includes() {
  static $pinboard_module_path;
  if (!$pinboard_module_path) {
    $pinboard_module_path = drupal_get_path('module', 'pinboard');
    require_once($pinboard_module_path .'/pinboard.common.inc');
  }
}

pinboard_load_common_includes();

/**
 *  Implementation of hook_perm()
 */
function pinboard_perm() {
  return array(
    'view public bookmarks', // public bookmarks
    'create bookmarks',
    'delete own bookmarks',
    'delete any bookmarks'
  );
}


/**
 *  Implementation of hook_menu()
 */
function pinboard_menu() {
  $items = array();

  $items['bookmark/add'] = array(
    'title' => 'Add bookmark',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_form'),
    'access callback' => 'user_access',
    'access arguments' => array('create bookmarks')
  );

  $items['bookmark/%/delete'] = array(
    'title' => 'Delete bookmark',
    'page callback' => 'pinboard_delete',
    'page arguments' => array(1),
    'access arguments' => array('delete own bookmarks'),
    'type' => MENU_CALLBACK
  );

  // callbacks
  $items['bookmark/%/%'] = array(
    'title' => 'Bookmark action',
    'page callback' => 'pinboard_actions_page',
    'page arguments' => array(1, 2),
    'access callback' => 'pinboard_access',
    'access arguments' => array('create bookmarks', 'delete own bookmarks'),
    'file' => 'pinboard.pages.inc',
    'type' => MENU_CALLBACK
  );

  // User-specific data
  $items['user/%user/bookmarks'] = array(
    'title' => t('Bookmarks'),
    'page callback' => 'pinboard_user_page',
    'page arguments' => array(1),
    'access callback' => 'pinboard_access',
    'access arguments' => array('view public bookmarks'),
    'file' => 'pinboard.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 5
  );

  return $items;
}

/**
 * Implememtation of hook_access
 * Check for multiple permissions
 */
function pinboard_access() {
  foreach(func_get_args() as $perm) {
    if (!user_access($perm)) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Implementation of hook_form()
 * This is the bookmark creation form
 */
function pinboard_form() {
  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => 'URL',
    '#required' => TRUE
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
  );

  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => 'Short description',
    '#description' => 'Enter a short description or summary for the bookmarked URL. Up to 250 characters.'
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Bookmark')
  );

  return $form;
}

/**
 *  Implementation of hook_validate()
 */
function pinboard_form_validate($form, &$form_state) {
  $url = $form_state['values']['url'];

  if (function_exists('idn_to_ascii')) {
    $url = idn_to_ascii($url);
  }
  if (!valid_url($url, TRUE) ) {
    form_set_error('url', 'Please enter a valid URL');
  }
}

/**
 *  Handles the bookmark creation
 *
 * @todo get title/description via drupal_http_request to $url if empty
 */
function pinboard_form_submit($form, &$form_state) {
  global $user;

  $bookmark = new StdClass;
  $bookmark->uid    = $user->uid;
  $bookmark->url    = check_url($form_state['values']['url']);
  $bookmark->title  = check_plain($form_state['values']['title']);
  $bookmark->description = check_plain($form_state['values']['description']);

  if (empty($bookmark->title)) {
    $data = pinboard_url_lookup($bookmark->url);

    if (isset($data['title']) && !empty($data['title'])) {
      $bookmark->title = $data['title'];
    }
    else {
      $bookmark->title = $bookmark->url;
    }

    if (empty($bookmark->description) && !empty($data['description'])) {
      $bookmark->description = $data['description'];
    }
  }

  if (pinboard_save($bookmark)) {
    $message = 'Bookmark successfully added';
  }
  else {
    $message = 'Could not save bookmark.';
  }

  drupal_set_message($message);
}

/**
 * Implementation of hook_user()
 * Inject a private/public bookmarks page option
 */
function pinboard_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'form' && $category == 'account') {
    $data = unserialize($account->data);
    $form['pinboard_visibility'] = array(
      '#type' => 'radios',
      '#title' => t('Bookmarks visibility'),
      '#options' => array(
        'private' => t('Private'),
        'public'  =>t('Public')
      ),
      '#default_value' => isset($data['pinboard_visibility']) ? $data['pinboard_visibility'] : 'private'
    );

    return $form;
  }
}

/**
 * Implementation of hook_init()
 * Adds the pinboard JavaScript and CSS
 */
function pinboard_init() {
  drupal_add_js(drupal_get_path('module', 'pinboard'). '/pinboard.js');
  drupal_add_css(drupal_get_path('module', 'pinboard'). '/pinboard.css');
}